@use "breakpoints";
@use 'color';
@forward "size" as size-*;
@use 'pseudo-classes';
@use 'pseudo-elements';
@use 'prefers';
@use 'viewport';
@use 'aria-states';

@mixin variations($className, $createBaseClass: true) {
    @if $createBaseClass {
        .#{$className} {
        @content;
        }
    }

    @include breakpoints.bp($className, false) {
        @content;
    }

    @include pseudo-classes.pseudo($className) {
        @content;
    }

    @include pseudo-elements.pseudo($className) {
        @content;
    }

    @include prefers.prefers($className) {
        @content;
    }

    @include viewport.screens($className) {
        @content;
    }

    @include aria-states.aria($className) {
        @content;
    }
}

@mixin color-variations($className, $element: "color", $createBaseClass: true) {
    @each $color, $hex in color.$basic-colors {
        @include variations("#{$className}-#{$color}", $createBaseClass) {
            #{$element}: $hex;
        }
    }

    @each $color, $value in color.$colors {
        @each $shade, $hex in $value {
          @include variations("#{$className}-#{$color}-#{$shade}", $createBaseClass) {
              #{$element}: $hex;
            }
        }
    }
}

// TODO: Refactor mixins
@mixin color-variations2($className, $elements: ("color"), $createBaseClass: true) {
    @each $color, $hex in color.$basic-colors {
        @include variations("#{$className}-#{$color}", $createBaseClass) {
          @each $element in $elements {
            #{$element}: $hex;
          }
        }
    }

    @each $color, $value in color.$colors {
        @each $shade, $hex in $value {
          @include variations("#{$className}-#{$color}-#{$shade}", $createBaseClass) {
            @each $element in $elements {
              #{$element}: $hex;
            }
          }
        }
    }
}
